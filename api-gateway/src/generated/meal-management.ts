// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.32.0
// source: meal-management.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type handleUnaryCall, type UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "mealmgmt";

export interface SaveMealRequest {
  userId: string;
  meal: Meal | undefined;
}

export interface SaveMealResponse {
  mealId: string;
  success: boolean;
}

export interface DeleteMealRequest {
  userId: string;
  mealId: string;
}

export interface DeleteMealResponse {
  success: boolean;
}

export interface GetMealsByDateRequest {
  userId: string;
  /** ISO date string */
  date: string;
}

export interface GetMealsByDateResponse {
  meals: MealResponse[];
}

export interface ImageData {
  /** Base64 encoded image data */
  data: string;
  /** MIME type of the image */
  mimeType: string;
  /** Original filename */
  name: string;
}

export interface Meal {
  id: string;
  userId: string;
  /** ISO date string */
  createdAt: string;
  /** Name of the meal */
  name: string;
  ingredients: Ingredient[];
  /** Image data for upload */
  imageData?: ImageData | undefined;
}

export interface MealResponse {
  id: string;
  userId: string;
  /** ISO date string */
  createdAt: string;
  /** Name of the meal */
  name: string;
  ingredients: Ingredient[];
  /** URL to the meal image (for responses) */
  imageUrl?: string | undefined;
}

export interface Ingredient {
  name: string;
  weight: number;
  nutrition?: NutritionInfo | undefined;
}

export interface NutritionInfo {
  per100g: { [key: string]: Nutrient };
}

export interface NutritionInfo_Per100gEntry {
  key: string;
  value: Nutrient | undefined;
}

export interface Nutrient {
  value?: number | undefined;
  unit: string;
}

export const MEALMGMT_PACKAGE_NAME = "mealmgmt";

function createBaseSaveMealRequest(): SaveMealRequest {
  return { userId: "", meal: undefined };
}

export const SaveMealRequest: MessageFns<SaveMealRequest> = {
  encode(message: SaveMealRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.meal !== undefined) {
      Meal.encode(message.meal, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SaveMealRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveMealRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.meal = Meal.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseSaveMealResponse(): SaveMealResponse {
  return { mealId: "", success: false };
}

export const SaveMealResponse: MessageFns<SaveMealResponse> = {
  encode(message: SaveMealResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mealId !== "") {
      writer.uint32(10).string(message.mealId);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SaveMealResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveMealResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mealId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseDeleteMealRequest(): DeleteMealRequest {
  return { userId: "", mealId: "" };
}

export const DeleteMealRequest: MessageFns<DeleteMealRequest> = {
  encode(message: DeleteMealRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.mealId !== "") {
      writer.uint32(18).string(message.mealId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMealRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMealRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mealId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseDeleteMealResponse(): DeleteMealResponse {
  return { success: false };
}

export const DeleteMealResponse: MessageFns<DeleteMealResponse> = {
  encode(message: DeleteMealResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMealResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMealResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetMealsByDateRequest(): GetMealsByDateRequest {
  return { userId: "", date: "" };
}

export const GetMealsByDateRequest: MessageFns<GetMealsByDateRequest> = {
  encode(message: GetMealsByDateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.date !== "") {
      writer.uint32(18).string(message.date);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMealsByDateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMealsByDateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.date = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetMealsByDateResponse(): GetMealsByDateResponse {
  return { meals: [] };
}

export const GetMealsByDateResponse: MessageFns<GetMealsByDateResponse> = {
  encode(message: GetMealsByDateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.meals) {
      MealResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMealsByDateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMealsByDateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.meals.push(MealResponse.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseImageData(): ImageData {
  return { data: "", mimeType: "", name: "" };
}

export const ImageData: MessageFns<ImageData> = {
  encode(message: ImageData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    if (message.mimeType !== "") {
      writer.uint32(18).string(message.mimeType);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseMeal(): Meal {
  return { id: "", userId: "", createdAt: "", name: "", ingredients: [] };
}

export const Meal: MessageFns<Meal> = {
  encode(message: Meal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.createdAt !== "") {
      writer.uint32(26).string(message.createdAt);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    for (const v of message.ingredients) {
      Ingredient.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.imageData !== undefined) {
      ImageData.encode(message.imageData, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Meal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMeal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.ingredients.push(Ingredient.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.imageData = ImageData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseMealResponse(): MealResponse {
  return { id: "", userId: "", createdAt: "", name: "", ingredients: [] };
}

export const MealResponse: MessageFns<MealResponse> = {
  encode(message: MealResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.createdAt !== "") {
      writer.uint32(26).string(message.createdAt);
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    for (const v of message.ingredients) {
      Ingredient.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.imageUrl !== undefined) {
      writer.uint32(50).string(message.imageUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MealResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMealResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.ingredients.push(Ingredient.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseIngredient(): Ingredient {
  return { name: "", weight: 0 };
}

export const Ingredient: MessageFns<Ingredient> = {
  encode(message: Ingredient, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.weight !== 0) {
      writer.uint32(17).double(message.weight);
    }
    if (message.nutrition !== undefined) {
      NutritionInfo.encode(message.nutrition, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Ingredient {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIngredient();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.weight = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nutrition = NutritionInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseNutritionInfo(): NutritionInfo {
  return { per100g: {} };
}

export const NutritionInfo: MessageFns<NutritionInfo> = {
  encode(message: NutritionInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.per100g).forEach(([key, value]) => {
      NutritionInfo_Per100gEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NutritionInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNutritionInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = NutritionInfo_Per100gEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.per100g[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseNutritionInfo_Per100gEntry(): NutritionInfo_Per100gEntry {
  return { key: "", value: undefined };
}

export const NutritionInfo_Per100gEntry: MessageFns<NutritionInfo_Per100gEntry> = {
  encode(message: NutritionInfo_Per100gEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Nutrient.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NutritionInfo_Per100gEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNutritionInfo_Per100gEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Nutrient.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseNutrient(): Nutrient {
  return { unit: "" };
}

export const Nutrient: MessageFns<Nutrient> = {
  encode(message: Nutrient, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== undefined) {
      writer.uint32(9).double(message.value);
    }
    if (message.unit !== "") {
      writer.uint32(18).string(message.unit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Nutrient {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNutrient();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.unit = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface MealManagementServiceClient {
  saveMeal(request: SaveMealRequest): Observable<SaveMealResponse>;

  deleteMeal(request: DeleteMealRequest): Observable<DeleteMealResponse>;

  getMealsByDate(request: GetMealsByDateRequest): Observable<GetMealsByDateResponse>;
}

export interface MealManagementServiceController {
  saveMeal(request: SaveMealRequest): Promise<SaveMealResponse> | Observable<SaveMealResponse> | SaveMealResponse;

  deleteMeal(
    request: DeleteMealRequest,
  ): Promise<DeleteMealResponse> | Observable<DeleteMealResponse> | DeleteMealResponse;

  getMealsByDate(
    request: GetMealsByDateRequest,
  ): Promise<GetMealsByDateResponse> | Observable<GetMealsByDateResponse> | GetMealsByDateResponse;
}

export function MealManagementServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["saveMeal", "deleteMeal", "getMealsByDate"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("MealManagementService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("MealManagementService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const MEAL_MANAGEMENT_SERVICE_NAME = "MealManagementService";

export type MealManagementServiceService = typeof MealManagementServiceService;
export const MealManagementServiceService = {
  saveMeal: {
    path: "/mealmgmt.MealManagementService/SaveMeal",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SaveMealRequest) => Buffer.from(SaveMealRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SaveMealRequest.decode(value),
    responseSerialize: (value: SaveMealResponse) => Buffer.from(SaveMealResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SaveMealResponse.decode(value),
  },
  deleteMeal: {
    path: "/mealmgmt.MealManagementService/DeleteMeal",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteMealRequest) => Buffer.from(DeleteMealRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteMealRequest.decode(value),
    responseSerialize: (value: DeleteMealResponse) => Buffer.from(DeleteMealResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteMealResponse.decode(value),
  },
  getMealsByDate: {
    path: "/mealmgmt.MealManagementService/GetMealsByDate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetMealsByDateRequest) => Buffer.from(GetMealsByDateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetMealsByDateRequest.decode(value),
    responseSerialize: (value: GetMealsByDateResponse) => Buffer.from(GetMealsByDateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetMealsByDateResponse.decode(value),
  },
} as const;

export interface MealManagementServiceServer extends UntypedServiceImplementation {
  saveMeal: handleUnaryCall<SaveMealRequest, SaveMealResponse>;
  deleteMeal: handleUnaryCall<DeleteMealRequest, DeleteMealResponse>;
  getMealsByDate: handleUnaryCall<GetMealsByDateRequest, GetMealsByDateResponse>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
