// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: nutrition.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type handleUnaryCall, type UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "nutrition";

export enum Gender {
  GENDER_UNSPECIFIED = 0,
  GENDER_MALE = 1,
  GENDER_FEMALE = 2,
  UNRECOGNIZED = -1,
}

export enum ActivityLevel {
  ACTIVITY_LEVEL_UNSPECIFIED = 0,
  ACTIVITY_LEVEL_SEDENTARY = 1,
  ACTIVITY_LEVEL_LIGHT = 2,
  ACTIVITY_LEVEL_MODERATE = 3,
  ACTIVITY_LEVEL_ACTIVE = 4,
  ACTIVITY_LEVEL_VERY_ACTIVE = 5,
  UNRECOGNIZED = -1,
}

export enum WeightGoal {
  WEIGHT_GOAL_UNSPECIFIED = 0,
  WEIGHT_GOAL_LOSE = 1,
  WEIGHT_GOAL_MAINTAIN = 2,
  WEIGHT_GOAL_GAIN = 3,
  UNRECOGNIZED = -1,
}

export enum GoalIntensity {
  GOAL_INTENSITY_UNSPECIFIED = 0,
  GOAL_INTENSITY_MILD = 1,
  GOAL_INTENSITY_MODERATE = 2,
  GOAL_INTENSITY_AGGRESSIVE = 3,
  UNRECOGNIZED = -1,
}

export enum DietaryPreference {
  DIETARY_PREFERENCE_UNSPECIFIED = 0,
  DIETARY_PREFERENCE_NONE = 1,
  DIETARY_PREFERENCE_VEGETARIAN = 2,
  DIETARY_PREFERENCE_VEGAN = 3,
  DIETARY_PREFERENCE_PESCETARIAN = 4,
  DIETARY_PREFERENCE_KETO = 5,
  DIETARY_PREFERENCE_PALEO = 6,
  UNRECOGNIZED = -1,
}

export enum Allergy {
  ALLERGY_UNSPECIFIED = 0,
  ALLERGY_NONE = 1,
  ALLERGY_DAIRY = 2,
  ALLERGY_EGGS = 3,
  ALLERGY_GLUTEN = 4,
  ALLERGY_PEANUTS = 5,
  ALLERGY_TREE_NUTS = 6,
  ALLERGY_FISH = 7,
  ALLERGY_SHELLFISH = 8,
  ALLERGY_SOY = 9,
  UNRECOGNIZED = -1,
}

export interface Nutrient {
  value?: number | undefined;
  unit: string;
}

export interface NutritionData {
  calories: Nutrient | undefined;
  protein: Nutrient | undefined;
  fats: Nutrient | undefined;
  carbs: Nutrient | undefined;
  fiber: Nutrient | undefined;
  vitaminA: Nutrient | undefined;
  vitaminD: Nutrient | undefined;
  vitaminB12: Nutrient | undefined;
  vitaminC: Nutrient | undefined;
  iron: Nutrient | undefined;
  calcium: Nutrient | undefined;
  magnesium: Nutrient | undefined;
}

export interface MealAnalysisRequest {
  user: UserProfile | undefined;
  ingredients: string[];
  nutrition: NutritionData | undefined;
}

export interface MealRating {
  letterGrade: string;
  score: number;
}

export interface AIRecommendRequest {
  user: UserProfile | undefined;
  ingredients: string[];
  nutrition: NutritionData | undefined;
}

export interface AIRecommendResponse {
  recommendations: string[];
  positiveFeedback: string;
}

export interface DietaryRestrictions {
  preference: DietaryPreference;
  allergies: Allergy[];
  dislikedIngredients: string[];
}

export interface UserProfile {
  age: number;
  gender: Gender;
  weightKg: number;
  heightCm: number;
  activityLevel: ActivityLevel;
  weightGoal: WeightGoal;
  goalIntensity: GoalIntensity;
  dietaryRestrictions: DietaryRestrictions | undefined;
}

export interface Micronutrients {
  /** mcg */
  vitaminA: number;
  /** mg */
  vitaminC: number;
  /** mcg */
  vitaminD: number;
  /** mcg */
  vitaminB12: number;
  /** mg */
  calcium: number;
  /** mg */
  iron: number;
  /** mg */
  magnesium: number;
}

export interface NutrientRecommendation {
  /** kcal */
  calories: number;
  /** g */
  protein: number;
  /** g */
  fats: number;
  /** g */
  carbs: number;
  /** g */
  fiber: number;
  micronutrients?: Micronutrients | undefined;
}

export interface CompleteMealAnalysisResponse {
  rating: MealRating | undefined;
  recommendations: string[];
  positiveFeedback: string;
  /** Optional */
  dailyRecommendations: NutrientRecommendation | undefined;
}

export const NUTRITION_PACKAGE_NAME = "nutrition";

function createBaseNutrient(): Nutrient {
  return { unit: "" };
}

export const Nutrient: MessageFns<Nutrient> = {
  encode(message: Nutrient, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== undefined) {
      writer.uint32(9).double(message.value);
    }
    if (message.unit !== "") {
      writer.uint32(18).string(message.unit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Nutrient {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNutrient();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.unit = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseNutritionData(): NutritionData {
  return {
    calories: undefined,
    protein: undefined,
    fats: undefined,
    carbs: undefined,
    fiber: undefined,
    vitaminA: undefined,
    vitaminD: undefined,
    vitaminB12: undefined,
    vitaminC: undefined,
    iron: undefined,
    calcium: undefined,
    magnesium: undefined,
  };
}

export const NutritionData: MessageFns<NutritionData> = {
  encode(message: NutritionData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.calories !== undefined) {
      Nutrient.encode(message.calories, writer.uint32(10).fork()).join();
    }
    if (message.protein !== undefined) {
      Nutrient.encode(message.protein, writer.uint32(18).fork()).join();
    }
    if (message.fats !== undefined) {
      Nutrient.encode(message.fats, writer.uint32(26).fork()).join();
    }
    if (message.carbs !== undefined) {
      Nutrient.encode(message.carbs, writer.uint32(34).fork()).join();
    }
    if (message.fiber !== undefined) {
      Nutrient.encode(message.fiber, writer.uint32(42).fork()).join();
    }
    if (message.vitaminA !== undefined) {
      Nutrient.encode(message.vitaminA, writer.uint32(50).fork()).join();
    }
    if (message.vitaminD !== undefined) {
      Nutrient.encode(message.vitaminD, writer.uint32(58).fork()).join();
    }
    if (message.vitaminB12 !== undefined) {
      Nutrient.encode(message.vitaminB12, writer.uint32(66).fork()).join();
    }
    if (message.vitaminC !== undefined) {
      Nutrient.encode(message.vitaminC, writer.uint32(74).fork()).join();
    }
    if (message.iron !== undefined) {
      Nutrient.encode(message.iron, writer.uint32(82).fork()).join();
    }
    if (message.calcium !== undefined) {
      Nutrient.encode(message.calcium, writer.uint32(90).fork()).join();
    }
    if (message.magnesium !== undefined) {
      Nutrient.encode(message.magnesium, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NutritionData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNutritionData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.calories = Nutrient.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.protein = Nutrient.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fats = Nutrient.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.carbs = Nutrient.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.fiber = Nutrient.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.vitaminA = Nutrient.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.vitaminD = Nutrient.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.vitaminB12 = Nutrient.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.vitaminC = Nutrient.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.iron = Nutrient.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.calcium = Nutrient.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.magnesium = Nutrient.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseMealAnalysisRequest(): MealAnalysisRequest {
  return { user: undefined, ingredients: [], nutrition: undefined };
}

export const MealAnalysisRequest: MessageFns<MealAnalysisRequest> = {
  encode(message: MealAnalysisRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      UserProfile.encode(message.user, writer.uint32(10).fork()).join();
    }
    for (const v of message.ingredients) {
      writer.uint32(18).string(v!);
    }
    if (message.nutrition !== undefined) {
      NutritionData.encode(message.nutrition, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MealAnalysisRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMealAnalysisRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = UserProfile.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ingredients.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nutrition = NutritionData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseMealRating(): MealRating {
  return { letterGrade: "", score: 0 };
}

export const MealRating: MessageFns<MealRating> = {
  encode(message: MealRating, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.letterGrade !== "") {
      writer.uint32(10).string(message.letterGrade);
    }
    if (message.score !== 0) {
      writer.uint32(16).int32(message.score);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MealRating {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMealRating();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.letterGrade = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.score = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseAIRecommendRequest(): AIRecommendRequest {
  return { user: undefined, ingredients: [], nutrition: undefined };
}

export const AIRecommendRequest: MessageFns<AIRecommendRequest> = {
  encode(message: AIRecommendRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      UserProfile.encode(message.user, writer.uint32(10).fork()).join();
    }
    for (const v of message.ingredients) {
      writer.uint32(18).string(v!);
    }
    if (message.nutrition !== undefined) {
      NutritionData.encode(message.nutrition, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AIRecommendRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIRecommendRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = UserProfile.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ingredients.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nutrition = NutritionData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseAIRecommendResponse(): AIRecommendResponse {
  return { recommendations: [], positiveFeedback: "" };
}

export const AIRecommendResponse: MessageFns<AIRecommendResponse> = {
  encode(message: AIRecommendResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.recommendations) {
      writer.uint32(10).string(v!);
    }
    if (message.positiveFeedback !== "") {
      writer.uint32(18).string(message.positiveFeedback);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AIRecommendResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIRecommendResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.recommendations.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.positiveFeedback = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseDietaryRestrictions(): DietaryRestrictions {
  return { preference: 0, allergies: [], dislikedIngredients: [] };
}

export const DietaryRestrictions: MessageFns<DietaryRestrictions> = {
  encode(message: DietaryRestrictions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.preference !== 0) {
      writer.uint32(8).int32(message.preference);
    }
    writer.uint32(18).fork();
    for (const v of message.allergies) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.dislikedIngredients) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DietaryRestrictions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDietaryRestrictions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.preference = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.allergies.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.allergies.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.dislikedIngredients.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseUserProfile(): UserProfile {
  return {
    age: 0,
    gender: 0,
    weightKg: 0,
    heightCm: 0,
    activityLevel: 0,
    weightGoal: 0,
    goalIntensity: 0,
    dietaryRestrictions: undefined,
  };
}

export const UserProfile: MessageFns<UserProfile> = {
  encode(message: UserProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.age !== 0) {
      writer.uint32(8).uint32(message.age);
    }
    if (message.gender !== 0) {
      writer.uint32(16).int32(message.gender);
    }
    if (message.weightKg !== 0) {
      writer.uint32(25).double(message.weightKg);
    }
    if (message.heightCm !== 0) {
      writer.uint32(33).double(message.heightCm);
    }
    if (message.activityLevel !== 0) {
      writer.uint32(40).int32(message.activityLevel);
    }
    if (message.weightGoal !== 0) {
      writer.uint32(48).int32(message.weightGoal);
    }
    if (message.goalIntensity !== 0) {
      writer.uint32(56).int32(message.goalIntensity);
    }
    if (message.dietaryRestrictions !== undefined) {
      DietaryRestrictions.encode(message.dietaryRestrictions, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.age = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.gender = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.weightKg = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.heightCm = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.activityLevel = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.weightGoal = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.goalIntensity = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.dietaryRestrictions = DietaryRestrictions.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseMicronutrients(): Micronutrients {
  return { vitaminA: 0, vitaminC: 0, vitaminD: 0, vitaminB12: 0, calcium: 0, iron: 0, magnesium: 0 };
}

export const Micronutrients: MessageFns<Micronutrients> = {
  encode(message: Micronutrients, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vitaminA !== 0) {
      writer.uint32(9).double(message.vitaminA);
    }
    if (message.vitaminC !== 0) {
      writer.uint32(17).double(message.vitaminC);
    }
    if (message.vitaminD !== 0) {
      writer.uint32(25).double(message.vitaminD);
    }
    if (message.vitaminB12 !== 0) {
      writer.uint32(33).double(message.vitaminB12);
    }
    if (message.calcium !== 0) {
      writer.uint32(41).double(message.calcium);
    }
    if (message.iron !== 0) {
      writer.uint32(49).double(message.iron);
    }
    if (message.magnesium !== 0) {
      writer.uint32(57).double(message.magnesium);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Micronutrients {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMicronutrients();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.vitaminA = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.vitaminC = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.vitaminD = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.vitaminB12 = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.calcium = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.iron = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.magnesium = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseNutrientRecommendation(): NutrientRecommendation {
  return { calories: 0, protein: 0, fats: 0, carbs: 0, fiber: 0 };
}

export const NutrientRecommendation: MessageFns<NutrientRecommendation> = {
  encode(message: NutrientRecommendation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.calories !== 0) {
      writer.uint32(9).double(message.calories);
    }
    if (message.protein !== 0) {
      writer.uint32(17).double(message.protein);
    }
    if (message.fats !== 0) {
      writer.uint32(25).double(message.fats);
    }
    if (message.carbs !== 0) {
      writer.uint32(33).double(message.carbs);
    }
    if (message.fiber !== 0) {
      writer.uint32(41).double(message.fiber);
    }
    if (message.micronutrients !== undefined) {
      Micronutrients.encode(message.micronutrients, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NutrientRecommendation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNutrientRecommendation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.calories = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.protein = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.fats = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.carbs = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.fiber = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.micronutrients = Micronutrients.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCompleteMealAnalysisResponse(): CompleteMealAnalysisResponse {
  return { rating: undefined, recommendations: [], positiveFeedback: "", dailyRecommendations: undefined };
}

export const CompleteMealAnalysisResponse: MessageFns<CompleteMealAnalysisResponse> = {
  encode(message: CompleteMealAnalysisResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rating !== undefined) {
      MealRating.encode(message.rating, writer.uint32(10).fork()).join();
    }
    for (const v of message.recommendations) {
      writer.uint32(18).string(v!);
    }
    if (message.positiveFeedback !== "") {
      writer.uint32(26).string(message.positiveFeedback);
    }
    if (message.dailyRecommendations !== undefined) {
      NutrientRecommendation.encode(message.dailyRecommendations, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompleteMealAnalysisResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompleteMealAnalysisResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rating = MealRating.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.recommendations.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.positiveFeedback = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.dailyRecommendations = NutrientRecommendation.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface NutritionsRatingServiceClient {
  analyzeMeal(request: MealAnalysisRequest): Observable<CompleteMealAnalysisResponse>;

  getDailyRecommendations(request: UserProfile): Observable<NutrientRecommendation>;
}

export interface NutritionsRatingServiceController {
  analyzeMeal(
    request: MealAnalysisRequest,
  ): Promise<CompleteMealAnalysisResponse> | Observable<CompleteMealAnalysisResponse> | CompleteMealAnalysisResponse;

  getDailyRecommendations(
    request: UserProfile,
  ): Promise<NutrientRecommendation> | Observable<NutrientRecommendation> | NutrientRecommendation;
}

export function NutritionsRatingServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["analyzeMeal", "getDailyRecommendations"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("NutritionsRatingService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("NutritionsRatingService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const NUTRITIONS_RATING_SERVICE_NAME = "NutritionsRatingService";

export type NutritionsRatingServiceService = typeof NutritionsRatingServiceService;
export const NutritionsRatingServiceService = {
  analyzeMeal: {
    path: "/nutrition.NutritionsRatingService/AnalyzeMeal",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MealAnalysisRequest) => Buffer.from(MealAnalysisRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => MealAnalysisRequest.decode(value),
    responseSerialize: (value: CompleteMealAnalysisResponse) =>
      Buffer.from(CompleteMealAnalysisResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CompleteMealAnalysisResponse.decode(value),
  },
  getDailyRecommendations: {
    path: "/nutrition.NutritionsRatingService/GetDailyRecommendations",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UserProfile) => Buffer.from(UserProfile.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UserProfile.decode(value),
    responseSerialize: (value: NutrientRecommendation) => Buffer.from(NutrientRecommendation.encode(value).finish()),
    responseDeserialize: (value: Buffer) => NutrientRecommendation.decode(value),
  },
} as const;

export interface NutritionsRatingServiceServer extends UntypedServiceImplementation {
  analyzeMeal: handleUnaryCall<MealAnalysisRequest, CompleteMealAnalysisResponse>;
  getDailyRecommendations: handleUnaryCall<UserProfile, NutrientRecommendation>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
