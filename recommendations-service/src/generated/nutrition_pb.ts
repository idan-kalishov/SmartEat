// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: nutrition.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'nutrition';

export enum Gender {
  GENDER_UNSPECIFIED = 0,
  GENDER_MALE = 1,
  GENDER_FEMALE = 2,
  UNRECOGNIZED = -1,
}

export enum ActivityLevel {
  ACTIVITY_LEVEL_UNSPECIFIED = 0,
  ACTIVITY_LEVEL_SEDENTARY = 1,
  ACTIVITY_LEVEL_LIGHT = 2,
  ACTIVITY_LEVEL_MODERATE = 3,
  ACTIVITY_LEVEL_ACTIVE = 4,
  ACTIVITY_LEVEL_VERY_ACTIVE = 5,
  UNRECOGNIZED = -1,
}

export enum WeightGoal {
  WEIGHT_GOAL_UNSPECIFIED = 0,
  WEIGHT_GOAL_LOSE = 1,
  WEIGHT_GOAL_MAINTAIN = 2,
  WEIGHT_GOAL_GAIN = 3,
  UNRECOGNIZED = -1,
}

export enum GoalIntensity {
  GOAL_INTENSITY_UNSPECIFIED = 0,
  GOAL_INTENSITY_MILD = 1,
  GOAL_INTENSITY_MODERATE = 2,
  GOAL_INTENSITY_AGGRESSIVE = 3,
  UNRECOGNIZED = -1,
}

export enum DietaryPreference {
  DIETARY_PREFERENCE_UNSPECIFIED = 0,
  DIETARY_PREFERENCE_NONE = 1,
  DIETARY_PREFERENCE_VEGETARIAN = 2,
  DIETARY_PREFERENCE_VEGAN = 3,
  DIETARY_PREFERENCE_PESCETARIAN = 4,
  DIETARY_PREFERENCE_KETO = 5,
  DIETARY_PREFERENCE_PALEO = 6,
  UNRECOGNIZED = -1,
}

export enum Allergy {
  ALLERGY_UNSPECIFIED = 0,
  ALLERGY_NONE = 1,
  ALLERGY_DAIRY = 2,
  ALLERGY_EGGS = 3,
  ALLERGY_GLUTEN = 4,
  ALLERGY_PEANUTS = 5,
  ALLERGY_TREE_NUTS = 6,
  ALLERGY_FISH = 7,
  ALLERGY_SHELLFISH = 8,
  ALLERGY_SOY = 9,
  UNRECOGNIZED = -1,
}

export interface Nutrient {
  value?: number | undefined;
  unit: string;
}

export interface NutritionData {
  calories: Nutrient | undefined;
  protein: Nutrient | undefined;
  fats: Nutrient | undefined;
  carbs: Nutrient | undefined;
  fiber: Nutrient | undefined;
  vitaminA: Nutrient | undefined;
  vitaminD: Nutrient | undefined;
  vitaminB12: Nutrient | undefined;
  vitaminC: Nutrient | undefined;
  iron: Nutrient | undefined;
  calcium: Nutrient | undefined;
  magnesium: Nutrient | undefined;
}

export interface MealAnalysisRequest {
  user: UserProfile | undefined;
  ingredients: string[];
  nutrition: NutritionData | undefined;
}

export interface MealRating {
  letterGrade: string;
  score: number;
}

export interface AIRecommendRequest {
  user: UserProfile | undefined;
  ingredients: string[];
  nutrition: NutritionData | undefined;
}

export interface AIRecommendResponse {
  recommendations: string[];
  positiveFeedback: string;
}

export interface DietaryRestrictions {
  preference: DietaryPreference;
  allergies: Allergy[];
  dislikedIngredients: string[];
}

export interface UserProfile {
  age: number;
  gender: Gender;
  weightKg: number;
  heightCm: number;
  activityLevel: ActivityLevel;
  weightGoal: WeightGoal;
  goalIntensity: GoalIntensity;
  dietaryRestrictions: DietaryRestrictions | undefined;
}

export interface Micronutrients {
  /** mcg */
  vitaminA: number;
  /** mg */
  vitaminC: number;
  /** mcg */
  vitaminD: number;
  /** mcg */
  vitaminB12: number;
  /** mg */
  calcium: number;
  /** mg */
  iron: number;
  /** mg */
  magnesium: number;
}

export interface NutrientRecommendation {
  /** kcal */
  calories: number;
  /** g */
  protein: number;
  /** g */
  fats: number;
  /** g */
  carbs: number;
  /** g */
  fiber: number;
  micronutrients: Micronutrients | undefined;
}

export const NUTRITION_PACKAGE_NAME = 'nutrition';

export interface NutritionServiceClient {
  getMealRating(request: MealAnalysisRequest): Observable<MealRating>;

  getAiRecommendations(
    request: AIRecommendRequest,
  ): Observable<AIRecommendResponse>;
}

export interface NutritionServiceController {
  getMealRating(
    request: MealAnalysisRequest,
  ): Promise<MealRating> | Observable<MealRating> | MealRating;

  getAiRecommendations(
    request: AIRecommendRequest,
  ):
    | Promise<AIRecommendResponse>
    | Observable<AIRecommendResponse>
    | AIRecommendResponse;
}

export function NutritionServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['getMealRating', 'getAiRecommendations'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('NutritionService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('NutritionService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const NUTRITION_SERVICE_NAME = 'NutritionService';
