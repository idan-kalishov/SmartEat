// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: exercise.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type handleUnaryCall, type UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "exercise";

export interface SaveExerciseRequest {
  userId: string;
  exercise: Exercise | undefined;
}

export interface SaveExerciseResponse {
  exerciseId: string;
  success: boolean;
}

export interface GetExercisesByDateResponse {
  exercises: Exercise[];
}

export interface GetExercisesByDateRequest {
  userId: string;
  /** ISO date string */
  date: string;
}

export interface DeleteExerciseRequest {
  userId: string;
  exerciseId: string;
}

export interface DeleteExerciseResponse {
  success: boolean;
}

export interface Exercise {
  id: string;
  userId: string;
  name: string;
  calories: string;
  minutes: number;
  /** ISO date string */
  createdAt: string;
}

export const EXERCISE_PACKAGE_NAME = "exercise";

function createBaseSaveExerciseRequest(): SaveExerciseRequest {
  return { userId: "", exercise: undefined };
}

export const SaveExerciseRequest: MessageFns<SaveExerciseRequest> = {
  encode(message: SaveExerciseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.exercise !== undefined) {
      Exercise.encode(message.exercise, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SaveExerciseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveExerciseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.exercise = Exercise.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseSaveExerciseResponse(): SaveExerciseResponse {
  return { exerciseId: "", success: false };
}

export const SaveExerciseResponse: MessageFns<SaveExerciseResponse> = {
  encode(message: SaveExerciseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.exerciseId !== "") {
      writer.uint32(10).string(message.exerciseId);
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SaveExerciseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveExerciseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.exerciseId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetExercisesByDateResponse(): GetExercisesByDateResponse {
  return { exercises: [] };
}

export const GetExercisesByDateResponse: MessageFns<GetExercisesByDateResponse> = {
  encode(message: GetExercisesByDateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.exercises) {
      Exercise.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetExercisesByDateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetExercisesByDateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.exercises.push(Exercise.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGetExercisesByDateRequest(): GetExercisesByDateRequest {
  return { userId: "", date: "" };
}

export const GetExercisesByDateRequest: MessageFns<GetExercisesByDateRequest> = {
  encode(message: GetExercisesByDateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.date !== "") {
      writer.uint32(18).string(message.date);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetExercisesByDateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetExercisesByDateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.date = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseDeleteExerciseRequest(): DeleteExerciseRequest {
  return { userId: "", exerciseId: "" };
}

export const DeleteExerciseRequest: MessageFns<DeleteExerciseRequest> = {
  encode(message: DeleteExerciseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.exerciseId !== "") {
      writer.uint32(18).string(message.exerciseId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteExerciseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteExerciseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.exerciseId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseDeleteExerciseResponse(): DeleteExerciseResponse {
  return { success: false };
}

export const DeleteExerciseResponse: MessageFns<DeleteExerciseResponse> = {
  encode(message: DeleteExerciseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteExerciseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteExerciseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseExercise(): Exercise {
  return { id: "", userId: "", name: "", calories: "", minutes: 0, createdAt: "" };
}

export const Exercise: MessageFns<Exercise> = {
  encode(message: Exercise, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.calories !== "") {
      writer.uint32(34).string(message.calories);
    }
    if (message.minutes !== 0) {
      writer.uint32(41).double(message.minutes);
    }
    if (message.createdAt !== "") {
      writer.uint32(50).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Exercise {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExercise();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.calories = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.minutes = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface ExerciseServiceClient {
  saveExercise(request: SaveExerciseRequest): Observable<SaveExerciseResponse>;

  getExercisesByDate(request: GetExercisesByDateRequest): Observable<GetExercisesByDateResponse>;

  deleteExercise(request: DeleteExerciseRequest): Observable<DeleteExerciseResponse>;
}

export interface ExerciseServiceController {
  saveExercise(
    request: SaveExerciseRequest,
  ): Promise<SaveExerciseResponse> | Observable<SaveExerciseResponse> | SaveExerciseResponse;

  getExercisesByDate(
    request: GetExercisesByDateRequest,
  ): Promise<GetExercisesByDateResponse> | Observable<GetExercisesByDateResponse> | GetExercisesByDateResponse;

  deleteExercise(
    request: DeleteExerciseRequest,
  ): Promise<DeleteExerciseResponse> | Observable<DeleteExerciseResponse> | DeleteExerciseResponse;
}

export function ExerciseServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["saveExercise", "getExercisesByDate", "deleteExercise"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ExerciseService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ExerciseService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const EXERCISE_SERVICE_NAME = "ExerciseService";

export type ExerciseServiceService = typeof ExerciseServiceService;
export const ExerciseServiceService = {
  saveExercise: {
    path: "/exercise.ExerciseService/SaveExercise",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SaveExerciseRequest) => Buffer.from(SaveExerciseRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SaveExerciseRequest.decode(value),
    responseSerialize: (value: SaveExerciseResponse) => Buffer.from(SaveExerciseResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SaveExerciseResponse.decode(value),
  },
  getExercisesByDate: {
    path: "/exercise.ExerciseService/GetExercisesByDate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetExercisesByDateRequest) =>
      Buffer.from(GetExercisesByDateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetExercisesByDateRequest.decode(value),
    responseSerialize: (value: GetExercisesByDateResponse) =>
      Buffer.from(GetExercisesByDateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetExercisesByDateResponse.decode(value),
  },
  deleteExercise: {
    path: "/exercise.ExerciseService/DeleteExercise",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteExerciseRequest) => Buffer.from(DeleteExerciseRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteExerciseRequest.decode(value),
    responseSerialize: (value: DeleteExerciseResponse) => Buffer.from(DeleteExerciseResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteExerciseResponse.decode(value),
  },
} as const;

export interface ExerciseServiceServer extends UntypedServiceImplementation {
  saveExercise: handleUnaryCall<SaveExerciseRequest, SaveExerciseResponse>;
  getExercisesByDate: handleUnaryCall<GetExercisesByDateRequest, GetExercisesByDateResponse>;
  deleteExercise: handleUnaryCall<DeleteExerciseRequest, DeleteExerciseResponse>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
